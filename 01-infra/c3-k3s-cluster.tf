# bootstrap/c3-k3s-cluster.tf

# --- K3s Configuration File ---
# Generate the K3s server configuration file dynamically.
# This approach is declarative and more maintainable than using INSTALL_K3S_EXEC.
resource "local_file" "k3s_config" {
  content  = <<-EOT
# This file is dynamically generated by Terraform.
# Do not edit manually.
datastore-endpoint: "http://127.0.0.1:2379"
disable:
  - traefik
tls-san:
  - "${local.api_server_fqdn}"
  - "${var.vps_ip}"
EOT
  filename = "${path.module}/k3s-config.yaml"
}

# --- K3s Installation and Configuration ---
# Use terraform_data as the modern replacement for null_resource.
resource "terraform_data" "k3s_install" {
  # This resource depends on the etcd setup being complete.
  depends_on = [terraform_data.vps_setup]

  # Trigger a re-install if the configuration file content changes.
  triggers_replace = {
    config_sha1 = sha1(local_file.k3s_config.content)
    k3s_version = var.k3s_version
  }

  connection {
    type        = "ssh"
    user        = var.ssh_user
    host        = var.vps_ip
    private_key = file(pathexpand(var.ssh_private_key_path))
  }

  # Provisioner to upload the configuration and run the K3s install script.
  provisioner "remote-exec" {
    inline = [
      "echo '==> [K3S-SETUP] Ensuring config directory exists...'",
      "mkdir -p /etc/rancher/k3s/",
      "echo '==> [K3S-SETUP] Removing old config file to ensure clean state...'",
      "rm -f /etc/rancher/k3s/config.yaml", # Remove old file before uploading new one
    ]
  }

  provisioner "file" {
    source      = local_file.k3s_config.filename
    destination = "/etc/rancher/k3s/config.yaml"
  }

  provisioner "remote-exec" {
    inline = [
      "echo '==> [K3S-INSTALL] Installing K3s server version ${var.k3s_version} with a double guarantee to disable Traefik...'",
      "curl -sfL https://get.k3s.io | INSTALL_K3S_VERSION='${var.k3s_version}' INSTALL_K3S_EXEC='--disable=traefik' sh -",
      "echo '==> [K3S-VERIFY] Waiting for k3s.yaml to be created...'",
      "timeout 60s bash -c 'until [ -f /etc/rancher/k3s/k3s.yaml ]; do sleep 2; done'",
      "echo '==> [K3S-SETUP] Setting kubeconfig permissions...'",
      "chmod 644 /etc/rancher/k3s/k3s.yaml"
    ]
  }
}
