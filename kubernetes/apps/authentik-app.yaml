apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: authentik
  namespace: argocd
spec:
  source:
    repoURL: https://charts.goauthentik.io
    chart: authentik
    targetRevision: 2025.8.4
    helm:
      releaseName: authentik
      values: |
        # ========= Authentik core =========
        authentik:
          secret_key: "GPJcN5Rt9p6x4zZ6Vw2qk8H0u1Qy3Lb7Md9Xf2Qa5Ws8Er1Ty3Ui7Zo0Bg4Nv6Kx"
          error_reporting:
            enabled: false
          postgresql:
            password: "a_strong_database_password_change_me"
          redis:
            password: ""

        # ========= PostgreSQL (embedded) =========
        postgresql:
          enabled: true
          auth:
            username: "authentik"
            database: "authentik"
            password: "a_strong_database_password_change_me"
          primary:
            args:
              - -c
              - config_file=/bitnami/postgresql/conf/postgresql.conf
              - -c
              - hba_file=/bitnami/postgresql/conf/pg_hba.conf
            configuration: |
              listen_addresses = '*'
              port = '5432'
              wal_level = 'replica'
              fsync = 'on'
              hot_standby = 'on'
              log_connections = 'false'
              log_disconnections = 'false'
              log_hostname = 'false'
              client_min_messages = 'error'
              include_dir = 'conf.d'

              # very-low memory profile
              shared_buffers = '16MB'
              effective_cache_size = '96MB'
              maintenance_work_mem = '16MB'
              work_mem = '2MB'
              max_connections = '25'
            resources:
              requests:
                cpu: 20m
                memory: 128Mi
              limits:
                cpu: "500m"
                memory: 256Mi

        # ========= Redis (embedded) =========
        redis:
          enabled: true
          architecture: standalone
          auth:
            enabled: false
          master:
            extraFlags:
              - "--maxmemory 192mb"
              - "--maxmemory-policy allkeys-lru"
            resources:
              requests:
                cpu: 20m
                memory: 96Mi
              limits:
                cpu: 300m
                memory: 192Mi

        # ========= Server (probes tuned for first-run) =========
        server:
          resources:
            requests:
              cpu: 100m
              memory: 256Mi
            limits:
              cpu: "700m"
              memory: 768Mi
          probes:
            startup:
              enabled: true
              httpGet:
                path: /-/health/live/
                port: http
              initialDelaySeconds: 120
              periodSeconds: 10
              timeoutSeconds: 5
              failureThreshold: 120
            readiness:
              enabled: true
              httpGet:
                path: /-/health/ready/
                port: http
              initialDelaySeconds: 60
              periodSeconds: 10
              timeoutSeconds: 5
              failureThreshold: 30
            liveness:
              enabled: true
              httpGet:
                path: /-/health/live/
                port: http
              initialDelaySeconds: 60
              periodSeconds: 10
              timeoutSeconds: 5
              failureThreshold: 12

        # ========= Worker (probes tuned; bump memory to avoid OOM) =========
        worker:
          resources:
            requests:
              cpu: 100m
              memory: 192Mi
            limits:
              cpu: "700m"
              memory: 768Mi
          probes:
            startup:
              enabled: true
              exec:
                command: ["ak", "healthcheck"]   # use built-in healthcheck
              initialDelaySeconds: 120
              periodSeconds: 10
              timeoutSeconds: 5
              failureThreshold: 120
            readiness:
              enabled: true
              exec:
                command: ["ak", "healthcheck"]
              initialDelaySeconds: 60
              periodSeconds: 10
              timeoutSeconds: 5
              failureThreshold: 30
            liveness:
              enabled: true
              exec:
                command: ["ak", "healthcheck"]
              initialDelaySeconds: 60
              periodSeconds: 10
              timeoutSeconds: 5
              failureThreshold: 12

  destination: 
    server: https://kubernetes.default.svc
    namespace: authentik
  syncPolicy: 
    automated: 
      prune: true
      selfHeal: true
    syncOptions: 
    - CreateNamespace=true